// This file was generated by the brine-kiwi compiler.
// Do not edit manually.

use brine_kiwi::*;
use serde::Serialize;
use serde_with::skip_serializing_none;

#[derive(Debug, Clone, PartialEq, Serialize)]
pub enum Type {
    Flat,
    Round,
    Pointed,
}

impl FromKiwi for Type {
    fn from_kiwi(value: &Value) -> Result<Self, KiwiError> {
        let s = value.as_string();
        match s {
            "FLAT" => Ok(Type::Flat),
            "ROUND" => Ok(Type::Round),
            "POINTED" => Ok(Type::Pointed),
            other => Err(KiwiError::InvalidEnumVariant(other.to_string())),
        }
    }
}


#[skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Default, Serialize)]
pub struct Color {
    pub red: u8,
    pub green: u8,
    pub blue: u8,
    pub alpha: u8,
}

impl FromKiwi for Color {
    fn from_kiwi(value: &Value) -> Result<Self, KiwiError> {
        let mut color = Self::default();

        if let Some(val) = value.get("red") {
            color.red = val.as_byte();
        } else {
            return Err(KiwiError::MissingField("red".into()));
        }

        if let Some(val) = value.get("green") {
            color.green = val.as_byte();
        } else {
            return Err(KiwiError::MissingField("green".into()));
        }

        if let Some(val) = value.get("blue") {
            color.blue = val.as_byte();
        } else {
            return Err(KiwiError::MissingField("blue".into()));
        }

        if let Some(val) = value.get("alpha") {
            color.alpha = val.as_byte();
        } else {
            return Err(KiwiError::MissingField("alpha".into()));
        }

        Ok(color)
    }
}

#[skip_serializing_none]
#[derive(Debug, Clone, PartialEq, Default, Serialize)]
pub struct Example {
    pub client_id: Option<u32>,
    pub type_: Option<Type>,
    pub colors: Option<Vec<Color>>,
}

impl FromKiwi for Example {
    fn from_kiwi(value: &Value) -> Result<Self, KiwiError> {
        let mut example = Self::default();

        if let Some(val) = value.get("clientID") {
            example.client_id = Some(val.as_uint());
        }

        if let Some(val) = value.get("type") {
            example.type_ = Some(Type::from_kiwi(val)?);
        }

        if let Some(arr) = value.get("colors") {
            let mut tmp = Vec::new();
            for item in arr.as_array() { tmp.push(Color::from_kiwi(item)?); }
            example.colors = Some(tmp);
        }

        Ok(example)
    }
}